#!/bin/bash

# Copyright 2008 Eugene V. Lyubimkin aka JackYF
# License: GPLv3
# Devoted to Evgenija V. Katyuk.

SPOOL_DIR=/var/spool/daptup

# spool/cache files
DAPTUP_UPDATES_BEFORE=$SPOOL_DIR/updates-before
DAPTUP_UPDATES_AFTER=$SPOOL_DIR/updates-after
DAPTUP_NEW_BEFORE=$SPOOL_DIR/new-before
DAPTUP_NEW_AFTER=$SPOOL_DIR/updates-after
DAPTUP_WATCH_BEFORE=$SPOOL_DIR/watch-before
DAPTUP_WATCH_AFTER=$SPOOL_DIR/watch-after
# safe temporary files
DAPTUP_ERRORS_FILE=$(tempfile)
DAPTUP_TMP_FILE=$(tempfile)

function delete_temp_files
{
	rm -f $DAPTUP_TMP_FILE $DAPTUP_ERRORS_FILE
}

trap "echo SIGTERM received && do_exit 1024" SIGTERM
trap "echo SIGINT received && do_exit 2048" SIGINT

# $1 - exit code
function do_exit
{
	delete_temp_files
	exit $1
}

# Checking for root priviledges
MY_UID=`id -u`
if [ "$MY_UID" != "0" ]; then
	echo "You must run daptup with root priviledges."
	do_exit 2
fi

DAPTUP_CONFFILE=/etc/daptup.conf
if [ -f $DAPTUP_CONFFILE ]; then
	. $DAPTUP_CONFFILE
else
	echo "Cannot read configuration from '$DAPTUP_CONFFILE'."
	do_exit 1
fi


DAPTUP_USE_COLOR=y

PARAM=$1
case $PARAM in
	--nocolor)
		DAPTUP_USE_COLOR=n	
		;;
	-h|--help)
		echo "Usage: `basename ${0}` [ -h | --help | --nocolor ]."
		echo
		echo "daptup runs 'aptitude update' command inside and outputs:"
		echo " - list of packages recently entered to repo"
		echo " - list of packages which got new updates"
		echo " - list of changes in 'watched' packages."
		echo
		echo "Options:"
		echo " -h, --help: output this help and exit"
		echo " --nocolor: do not use colored output"
		do_exit 0
		;;
	*)
		if [ "$PARAM" != "" ]; then
			echo "Unknown param: $PARAM"
			do_exit 4
		fi
		;;
esac

if [ "$DAPTUP_DISABLE_COLUMNS" == "y" ]; then
	DAPTUP_EXTRA_APTITUDE_ARGUMENTS="$DAPTUP_EXTRA_APTITUDE_ARGUMENTS --disable-columns"
fi


# $1 - output
# $2 - errors
function get_new()
{
	aptitude search ~N \
		--display-format "$DAPTUP_NEW_DISPLAY_FORMAT" \
		--width $DAPTUP_NEW_DISPLAY_WIDTH \
		$DAPTUP_EXTRA_APTITUDE_ARGUMENTS > $1 2> $2
}

# $1 - output
function get_updates()
{
	apt-show-versions -u | sort > $1
}

# $1 - output
function get_watched()
{
	local GREP_EXPRESSION
	for package in $DAPTUP_PACKAGES_WATCH_FOR; do
		if [ -n "$GREP_EXPRESSION" ]; then
			GREP_EXPRESSION="${GREP_EXPRESSION}|"
		fi
		GREP_EXPRESSION="${GREP_EXPRESSION}^${package}$"
	done
	if [ -z "$GREP_EXPRESSION" ]; then # no packages to watch
		touch $1
	else
		aptitude search "~n($GREP_EXPRESSION)" \
			--display-format "$DAPTUP_WATCH_DISPLAY_FORMAT" \
			--width $DAPTUP_WATCH_DISPLAY_WIDTH \
			$DAPTUP_EXTRA_APTITUDE_ARGUMENTS > $1
	fi
}

# $1 - before
# $2 - after
# $3 - where result will be stored
function diff_cmd()
{
	diff --minimal $1 $2 | grep -E "^[<>]" | sort > $3
}

function reset_color()
{
	# resetting to default color if needed...
	if [ "$DAPTUP_USE_COLOR" == "y" ]; then
		tput sgr0
	fi
}

echo -n "Getting pre-new... "
get_new $DAPTUP_NEW_BEFORE $DAPTUP_ERRORS_FILE

APTITUDE_RESULT=`wc -l < $DAPTUP_ERRORS_FILE`
if [ "$APTITUDE_RESULT" != "0" ]; then
	echo "errors present. Is apt/dpkg running?.."
	do_exit 8
fi
echo "[done]"

echo -n "Getting pre-updates... "
get_updates $DAPTUP_UPDATES_BEFORE
echo "[done]"

echo -n "Getting pre-watched... "
get_watched $DAPTUP_WATCH_BEFORE
echo "[done]"

aptitude update
APTITUDE_RESULT=$?
if [ "$APTITUDE_RESULT" != "0" ]; then
	echo "aptitude returned non-zero code, daptup stopped here."
	do_exit $?
fi


echo -n "Getting post-new... "
get_new $DAPTUP_NEW_AFTER /dev/null
echo "[done]"

echo -n "Getting post-updates... "
get_updates $DAPTUP_UPDATES_AFTER
echo "[done]"

echo -n "Getting post-watched... "
get_watched $DAPTUP_WATCH_AFTER
echo "[done]"

if [ "$DAPTUP_USE_COLOR" == "y" ]; then
	tput init
fi
# by default daptup tries to use colors now, it can be disabled by specifying '--nocolor' option

echo

diff_cmd $DAPTUP_UPDATES_BEFORE $DAPTUP_UPDATES_AFTER $DAPTUP_TMP_FILE
if [ "`wc -l < $DAPTUP_TMP_FILE`" == "0" ]; then # no updates
	echo "No updates."
else
	echo "Updates:"
	cat $DAPTUP_TMP_FILE | sed s/upgradeable\ from/-/g | while read line; do
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			if [ "`expr "$line" : '<'`" == "0" ]; then
				tput setf 2; # green
			else
				tput setf 4; # red
			fi;
		fi;
		echo $line;
		done
fi

reset_color

diff_cmd $DAPTUP_NEW_BEFORE $DAPTUP_NEW_AFTER $DAPTUP_TMP_FILE
if [ "`wc -l < $DAPTUP_TMP_FILE`" == "0" ]; then # no new
	echo "No new packages."
else
	echo "New packages:"
	cat $DAPTUP_TMP_FILE | while read line; do
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			if [ "`expr "$line" : '<'`" == "0" ]; then
				tput setf 3; # blue
			else
				tput setf 4; # red
			fi;
		fi;
		echo $line;
		done
fi

reset_color

diff_cmd $DAPTUP_WATCH_BEFORE $DAPTUP_WATCH_AFTER $DAPTUP_TMP_FILE
if [ "`wc -l < $DAPTUP_TMP_FILE`" == "0" ]; then # no changes in watched
	echo "No news in watched packages."
else
	echo "Watched packages:"
	cat $DAPTUP_TMP_FILE | while read line; do
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			if [ "`expr "$line" : '<'`" == "0" ]; then
				tput setf 2; # green
			else
				tput setf 4; # red
			fi;
		fi;
		echo $line;
		done
fi

reset_color

delete_temp_files

do_exit 0

