#!/bin/bash

# Copyright 2008 Eugene V. Lyubimkin aka JackYF
# License: GPLv3
# Devoted to Evgeniya V. Katyuk.

# translation support
. gettext.sh
TEXTDOMAIN=daptup
export TEXTDOMAIN
TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR

# exit if any command returned non-zero status
set -e

SPOOL_DIR=/var/spool/daptup

# spool/cache files
DAPTUP_UPDATES_BEFORE=$SPOOL_DIR/updates-before
DAPTUP_UPDATES_AFTER=$SPOOL_DIR/updates-after
DAPTUP_NEW_BEFORE=$SPOOL_DIR/new-before
DAPTUP_NEW_AFTER=$SPOOL_DIR/new-after
DAPTUP_WATCH_BEFORE=$SPOOL_DIR/watch-before
DAPTUP_WATCH_AFTER=$SPOOL_DIR/watch-after
DAPTUP_OUTDATED=$SPOOL_DIR/outdated
# safe temporary files
DAPTUP_ERRORS_FILE=$(tempfile)
DAPTUP_TMP_FILE=$(tempfile)

function delete_temp_files
{
	rm -f $DAPTUP_TMP_FILE $DAPTUP_ERRORS_FILE
}

trap "echo `gettext \"SIGTERM received\"` && do_exit 1024" SIGTERM
trap "echo `gettext \"SIGINT received\"` && do_exit 2048" SIGINT

# $1 - exit code
function do_exit
{
	delete_temp_files
	exit $1
}

DAPTUP_CONFFILE=/etc/daptup.conf
if [ -f $DAPTUP_CONFFILE ]; then
	. $DAPTUP_CONFFILE
else
	eval_gettext "Cannot read configuration from '\$DAPTUP_CONFFILE'."; echo
	do_exit 1
fi


DAPTUP_USE_COLOR=y

PARAM=$1
case $PARAM in
	--nocolor)
		DAPTUP_USE_COLOR=n	
		;;
	-h|--help)
		BASENAME=`basename ${0}`
		eval_gettext "Usage: \$BASENAME [ -h | --help | --nocolor ]."; echo
		echo
		gettext "daptup runs 'aptitude update' command inside and outputs:"; echo
		gettext " - list of packages recently entered to repo;"; echo
		gettext " - list of packages which got new updates;"; echo
		gettext " - list of changes in 'watched' packages;"; echo
		gettext " - list of outdated packages (optionally)."; echo
		echo
		gettext "Options:"; echo
		gettext " -h, --help: output this help and exit"; echo
		gettext " --nocolor: do not use colored output"; echo
		do_exit 0
		;;
	*)
		if [ "$PARAM" != "" ]; then
			eval_gettext "Unknown param: \$PARAM"; echo
			do_exit 4
		fi
		;;
esac

# Checking for root privileges
MY_UID=`id -u`
if [ "$MY_UID" != "0" ]; then
	gettext "You must run daptup with root privileges."; echo
	do_exit 2
fi

if [ "$DAPTUP_DISABLE_COLUMNS" == "y" ]; then
	DAPTUP_EXTRA_APTITUDE_ARGUMENTS="$DAPTUP_EXTRA_APTITUDE_ARGUMENTS --disable-columns"
fi


# $1 - output
# $2 - errors
function get_new()
{
	aptitude search ~N \
		--display-format "$DAPTUP_NEW_DISPLAY_FORMAT" \
		--width $DAPTUP_NEW_DISPLAY_WIDTH \
		$DAPTUP_EXTRA_APTITUDE_ARGUMENTS > $1 2> $2
}

# $1 - output
function get_updates()
{
	apt-show-versions -u | sort > $1
}

# $1 - output
function get_watched()
{
	local GREP_EXPRESSION
	for package in $DAPTUP_PACKAGES_WATCH_FOR; do
		if [ -n "$GREP_EXPRESSION" ]; then
			GREP_EXPRESSION="${GREP_EXPRESSION}|"
		fi
		GREP_EXPRESSION="${GREP_EXPRESSION}^${package}$"
	done
	if [ -z "$GREP_EXPRESSION" ]; then # no packages to watch
		touch $1
	else
		aptitude search "~n($GREP_EXPRESSION)" \
			--display-format "$DAPTUP_WATCH_DISPLAY_FORMAT" \
			--width $DAPTUP_WATCH_DISPLAY_WIDTH \
			$DAPTUP_EXTRA_APTITUDE_ARGUMENTS > $1
	fi
}

# $1 - result file
function find_old_packages
{
	local DOC_DIR=/usr/share/doc
	local SECONDS_IN_DAY=`expr 60 \* 60 \* 24`

	rm -f $1
	touch $1
	
	cat $DAPTUP_UPDATES_AFTER | while read line; do
		package=`echo $line | grep -Eo "^.*/" | sed 's|/||'`
		local CHANGELOG_FILE
		if [ -f $DOC_DIR/$package/changelog.Debian.gz ]; then
			CHANGELOG_FILE=$DOC_DIR/$package/changelog.Debian.gz
		elif [ -f $DOC_DIR/$package/changelog.gz ]; then
			CHANGELOG_FILE=$DOC_DIR/$package/changelog.gz
		else
			eval_gettext "warning: cannot find any changelog for package '\$package'"; echo
		fi

		if [ -n "$CHANGELOG_FILE" ]; then # if we've found a changelog
			local LAST_MODIFIED_LINE
			LAST_MODIFIED_LINE=`zgrep -E "^ -- " $CHANGELOG_FILE | head -1`;
			if [ -n "$LAST_MODIFIED_LINE" ]; then # changelog is correct

				# extracting date
				# example: " -- James Troup <james@nocrew.org>  Mon, 24 Apr 2006 04:24:07 +0100"

				DATE=`echo $LAST_MODIFIED_LINE | grep -Eo "[0-9 ][0-9] [A-Z][a-z][a-z] [0-9]{4,4}"`
				if [ -n "$DATE" ]; then # date is extracted correctly
					CURRENT_TIMESTAMP=`date +%s`
					PACKAGE_TIMESTAMP=`date -d "$DATE" +%s`
					DAYS=`expr \( $CURRENT_TIMESTAMP - $PACKAGE_TIMESTAMP \) / $SECONDS_IN_DAY`
					if [ $DAYS -gt $DAPTUP_MINIMAL_DAY_COUNT_TREATING_OUTDATED ]; then # package is old
						echo -n $line >> $1
						echo -n ", $DAYS " >> $1
						ngettext "day" "days" $DAYS >> $1
						echo >> $1
					fi
				else # date is extracted badly
					eval_gettext "error: cannot extract last modification date for package '\$package'"; echo
				fi
			else # changelog is not correct
				eval_gettext "error: cannot fetch last entry from changelog for package '\$package'"; echo
			fi
		fi
	done
}

function print_done
{
	gettext "[done]"; echo
}

# $1 - before
# $2 - after
# $3 - where result will be stored
function diff_cmd()
{
	diff --minimal $1 $2 | grep -E "^[<>]" | sort > $3
}

function reset_color()
{
	# resetting to default color if needed...
	if [ "$DAPTUP_USE_COLOR" == "y" ]; then
		tput sgr0
	fi
}

gettext "Building old list of packages... "
get_new $DAPTUP_NEW_BEFORE $DAPTUP_ERRORS_FILE

APTITUDE_RESULT=`wc -l < $DAPTUP_ERRORS_FILE`
if [ "$APTITUDE_RESULT" != "0" ]; then
	echo "errors present. Is apt/dpkg running?.."
	do_exit 8
fi
print_done

gettext "Building old list of available updates... "
get_updates $DAPTUP_UPDATES_BEFORE
print_done

gettext "Building old list of watched packages... "
get_watched $DAPTUP_WATCH_BEFORE
print_done

aptitude update || (echo "aptitude returned non-zero code, daptup stopped here."; do_exit 8)

gettext "Building new list of packages... "
get_new $DAPTUP_NEW_AFTER /dev/null
print_done

gettext "Building new list of available updates... "
get_updates $DAPTUP_UPDATES_AFTER
print_done

gettext "Building new list of watched packages... "
get_watched $DAPTUP_WATCH_AFTER
print_done

OUTPUT_OUTDATED=n
if [ "$DAPTUP_CHECK_FOR_OUTDATED_PACKAGES" == "y" ]; then
	# if DAPTUP_MINIMAL_DAY_COUNT_TREATING_OUTDATED variable contains non-numeric
	# data, print an error and don't try to check for outdated packages
	set +e
	expr "$DAPTUP_MINIMAL_DAY_COUNT_TREATING_OUTDATED" + 0 >/dev/null 2>/dev/null
	exit_code=$?
	set -e
	if [ "$exit_code" == "0" ]; then
		gettext "Building list of outdated packages... "
		find_old_packages $DAPTUP_OUTDATED
		OUTPUT_OUTDATED=y
		print_done
	else
		gettext "error: DAPTUP_MINIMAL_DAY_COUNT_TREATING_OUTDATED contains non-numeric data"; echo
	fi
else
	gettext "Skipping check for outdated packages."; echo
fi
	
if [ "$DAPTUP_USE_COLOR" == "y" ]; then
	tput init
fi
# by default daptup tries to use colors now, it can be disabled by specifying '--nocolor' option

echo

diff_cmd $DAPTUP_UPDATES_BEFORE $DAPTUP_UPDATES_AFTER $DAPTUP_TMP_FILE
if [ "`wc -l < $DAPTUP_TMP_FILE`" == "0" ]; then # no updates
	gettext "No new updates."; echo
else
	gettext "New updates:"; echo
	cat $DAPTUP_TMP_FILE | sed s/upgradeable\ from/-/g | sed 's/ to / -> /g' | while read line; do
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			if [ "`expr "$line" : '<'`" == "0" ]; then
				tput setf 2; # green
			else
				tput setf 4; # red
			fi;
		fi;
		echo $line;
		done
fi

reset_color

diff_cmd $DAPTUP_NEW_BEFORE $DAPTUP_NEW_AFTER $DAPTUP_TMP_FILE
if [ "`wc -l < $DAPTUP_TMP_FILE`" == "0" ]; then # no new
	gettext "No new or removed packages."; echo
else
	gettext "New and removed packages:"; echo
	cat $DAPTUP_TMP_FILE | while read line; do
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			if [ "`expr "$line" : '<'`" == "0" ]; then
				tput setf 3; # blue
			else
				tput setf 4; # red
			fi;
		fi;
		echo $line;
		done
fi

reset_color

diff_cmd $DAPTUP_WATCH_BEFORE $DAPTUP_WATCH_AFTER $DAPTUP_TMP_FILE
if [ "`wc -l < $DAPTUP_TMP_FILE`" == "0" ]; then # no changes in watched
	gettext "No news in watched packages."; echo
else
	gettext "Changes in watched packages:"; echo
	cat $DAPTUP_TMP_FILE | while read line; do
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			if [ "`expr "$line" : '<'`" == "0" ]; then
				tput setf 2; # green
			else
				tput setf 4; # red
			fi;
		fi;
		echo $line;
		done
fi

reset_color

if [ "$OUTPUT_OUTDATED" == "y" ]; then
	if [ "`wc -l < $DAPTUP_OUTDATED`" == "0" ]; then # no data in outdated
		gettext "No outdated packages."; echo
	else
		gettext "Outdated packages:"; echo
		if [ "$DAPTUP_USE_COLOR" == "y" ]; then
			tput setf 5 # magenta
		fi
		cat $DAPTUP_OUTDATED | sed 's/upgradeable from/-/g' | sed 's/ to / -> /g' | while read line; do
			echo -n "  "
			echo $line
		done
	fi
fi

reset_color

delete_temp_files

do_exit 0

